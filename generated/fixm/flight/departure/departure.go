// Code generated by xgen. DO NOT EDIT.

package departure

import (
	"github.com/edancain/FIXMSchema/generated/fixm/base/"
)

// AirfileIndicatorType is Identifies a flight that has filed its flight plan while in the air, beginning its route description from a specified point en-route, and therefore may not have provided a departure aerodrome.
type AirfileIndicatorType string

// DepartureTimeTypeType is Indicates that the associated trajectory point corresponds to the point at which the aircraft is predicted to be wheels off the runway on departure.
type DepartureTimeTypeType string

// ActualTimeOfDepartureType is The type of departure time represented. [FIXM]
type ActualTimeOfDepartureType struct {
	Extension []*base.ActualTimeOfDepartureExtensionType `xml:"extension"`
	Position  *base.GeographicalPositionType             `xml:"position"`
	Time      *base.DateTimeUtcType                      `xml:"time"`
	Type      string                                `xml:"type"`
}

// DepartureType is Groups information pertaining to the flight's departure.
type DepartureType struct {
	ActualTimeOfDeparture           interface{}                    `xml:"actualTimeOfDeparture"`
	AirfileIndicator                string                         `xml:"airfileIndicator"`
	AirportSlotIdentification       *base.AirportSlotIdentificationType `xml:"airportSlotIdentification"`
	DepartureAerodrome              *base.AerodromeReferenceType        `xml:"departureAerodrome"`
	DeparturePoint                  interface{}                    `xml:"departurePoint"`
	DepartureAerodromePrevious      *base.AerodromeReferenceType        `xml:"departureAerodromePrevious"`
	DeparturePointPrevious          interface{}                    `xml:"departurePointPrevious"`
	EstimatedOffBlockTime           *base.DateTimeUtcType               `xml:"estimatedOffBlockTime"`
	EstimatedRouteStartTime         *base.DateTimeUtcType               `xml:"estimatedRouteStartTime"`
	EstimatedOffBlockTimePrevious   *base.DateTimeUtcType               `xml:"estimatedOffBlockTimePrevious"`
	EstimatedRouteStartTimePrevious *base.DateTimeUtcType               `xml:"estimatedRouteStartTimePrevious"`
	Extension                       []*base.DepartureExtensionType      `xml:"extension"`
	RunwayDirection                 *base.RunwayDirectionDesignatorType `xml:"runwayDirection"`
	TakeoffAlternateAerodrome       []*base.AerodromeReferenceType      `xml:"takeoffAlternateAerodrome"`
}

// DeparturePointChoiceType ...
type DeparturePointChoiceType struct {
	DesignatedPoint *base.DesignatedPointType      `xml:"designatedPoint"`
	Navaid          *base.NavaidType               `xml:"navaid"`
	Position        *base.GeographicalPositionType `xml:"position"`
	RelativePoint   *base.RelativePointType        `xml:"relativePoint"`
}
